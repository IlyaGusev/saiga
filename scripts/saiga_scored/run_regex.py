from collections import Counter

import fire

from src.util.io import read_jsonl, write_jsonl


BAD_SS = (
    "как ии",
    "как ai",
    "как аи",
    "как модель ии",
    "как алгоритм",
    "языковая модель ии",
    "как искусственный интеллект",
    "как нейросеть",
    "виртуальный ассистент",
    "виртуальный помощник",
    "как нейронная сеть",
    "онлайн-ассистент",
    "интеллектуальный помощник",
    "голосовой помощник",
    "искусственный разум",
    "компьютерная программа",
    "программный помощник",
    "представитель ии",
    "ассистент ии",
    "ии-ассистент",
    "умный искусственный интеллект",
    "помощник ai",
    "как ассистент",
    "как помощник",
    "как иси-ассистент"
    "ai помощник",
    "я являюсь искусственным интеллектом",
    "я искусственный интеллект",
    "я - искусственный интеллект",
    "я – искусственный интеллект",
    "я — искусственный интеллект",
    "я - искуственный интеллект",
    "в качестве ии",
    "в качестве искуственного интеллекта",
    "от лица ии",
    "от лица искуственного интеллекта",
    "openai",
    "chatgpt",
    "as a language model",
    "as an ai",
    "sorry",
    "я - алгоритм",
    "я – алгоритм",
    "я - компьютерная программа",
    "я – компьютерная программа",
    "я компьютерная программа",
    "я являюсь компьютерной программой",
    "я - ai",
    "я – ai",
    "я ai",
    "я являюсь ai",
    "я - ии",
    "я – ии",
    "я ии",
    "я являюсь ии",
    "я - виртуальный помощник",
    "я – виртуальный помощник",
    "я виртуальный помощник",
    "я являюсь виртуальным помощником",
    "я - виртуальный ассистент",
    "я – виртуальный ассистент",
    "я виртуальный ассистент",
    "я являюсь виртуальным ассистентом",
    "я - программа",
    "я – программа",
    "я программа",
    "я являюсь программой",
    "я - ассистент",
    "я – ассистент",
    "я ассистент",
    "я - это искусственный интеллект",
    "я – это искусственный интеллект",
    "я – это искуственный интеллект",
    "я - это искуственный интеллект",
    "я -- искусственный интеллект",
    "я -- это искуственный интеллект",
    "всего лишь искусственный интеллект",
    "всего лишь искуственный интеллект",
    "в качестве искусственного интеллекта",
    "не могу выполнить эту задачу",
    "я не могу выполнить это задание",
    "база знаний",
    "обсудим что-нибудь другое",
    "неподобающ",
    "незакон",
    "цензурн",
    "приличн",
    "такого рода",
    "этого рода",
    "менять тему",
    "другие темы",
    "таким запрос",
    "этим запрос",
    "таких разговорах",
    "о чем-то другом",
    "о чём-нибудь другом",
    "такие темы",
    "не могу обсуждать",
    "не могу продолжать",
    "данный разговор",
    "соответствует правилам",
    "ограничивается",
    "противоречит политике",
    "правила платформы",
    "безопасность платформы",
    "на момент",
    "на данный момент",
    "информация ограничена",
    "актуальны на",
    "на данных до",
    "извини, но я",
    "извините, но я",
    "не могу пред",
    "моя последняя информация",
)


def set_regex_flag(records):
    new_records = []
    counter = Counter()

    for record in records:
        messages = record["messages"]
        bot_messages = [m for m in messages if m["role"] in ("assistant", "bot")]
        if "is_bad_by_regex" not in record:
            record["is_bad_by_regex"] = False

        for m in bot_messages:
            for ss in BAD_SS:
                if ss in m["content"].lower():
                    counter[ss] += 1
                    record["is_bad_by_regex"] = True
                    break
            if record["is_bad_by_regex"]:
                break
        new_records.append(record)
    print(counter.most_common())
    return new_records


def main(input_path, output_path):
    records = list(read_jsonl(input_path))
    new_records = set_regex_flag(records)
    print(len(new_records))
    print(sum([r["is_bad_by_regex"] is False for r in new_records]))
    new_records = [r for r in new_records if not r["is_bad_by_regex"]]
    write_jsonl(new_records, output_path)


if __name__ == "__main__":
    fire.Fire(main)
